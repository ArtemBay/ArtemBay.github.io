{"version":3,"sources":["assets/i1.png","assets/i2.png","assets/i3.png","assets/01.jpeg","assets/04.jpeg","assets/02.jpeg","assets/03.jpeg","assets/05.jpeg","components/Code.jsx","components/Icons.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultStyle","padding","Code","defaultProps","code","language","className","style","tokens","getLineProps","getTokenProps","fStyle","Object","assign","map","line","i","key","token","Icons","src","icon1","icon2","icon3","App","strength","type","bg","height","href","size","bgImage","image1","blur","min","max","image4","renderLayer","percentage","position","background","left","top","borderRadius","transform","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9ec89c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/i1.cbe6fbbb.png\";","module.exports = __webpack_public_path__ + \"static/media/i2.e0f78e12.png\";","module.exports = __webpack_public_path__ + \"static/media/i3.11771b48.png\";","module.exports = __webpack_public_path__ + \"static/media/01.07ab510a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/04.243d8b4c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/02.499d0e27.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/03.91cab153.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/05.148af95f.jpeg\";","import Highlight, { defaultProps } from \"prism-react-renderer\";\nimport React from \"react\";\n\nconst defaultStyle = {\n  padding: \"8px 20px\"\n};\n\nconst exampleCode = `import discord\nfrom discord.ext import commands\n\nbot = commands.Bot(command_prefix='!', self_bot=True)\n\n@bot.command()\nasync def obeme(ctx):\n  while True:\n  await ctx.send(\"Buy dicord bots on https://artembay.tk/shop\")\n\nbot.run(token, bot=False)`;\n\nconst Code = () => (\n  <Highlight {...defaultProps} code={exampleCode} language=\"python\">\n    {({ className, style, tokens, getLineProps, getTokenProps }) => {\n      const fStyle = Object.assign(defaultStyle, style);\n\n      return (\n        <pre className={className} style={fStyle}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )\n    }}\n  </Highlight>\n);\n\nexport default Code;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport icon1 from \"../assets/i1.png\";\nimport icon2 from \"../assets/i2.png\";\nimport icon3 from \"../assets/i3.png\";\n\nimport \"./Icon.css\";\n\n\nconst Icons = () => (\n  <div className=\"icons\">\n    <div className=\"icon-con\"  >\n    \t<img className=\"icon\" src={icon1}></img>\n    \t<div className=\"icon-title\">Love to listen music</div>\n    </div>\n     <div className=\"icon-con\"  >\n    \t<img className=\"icon\" src={icon2}></img>\n    \t<div className=\"icon-title\">Dont like toxic people</div>\n    </div>\n     <div className=\"icon-con\"  >\n    \t<img className=\"icon\" src={icon3}></img>\n    \t<div className=\"icon-title\">I donâ€™t have any friends</div>\n    </div>\n  </div>\n);\n\nexport default Icons;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Parallax } from \"react-parallax\";\nimport ParticlesBg from \"particles-bg\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport Code from \"./components/Code.jsx\";\nimport Icons from \"./components/Icons.jsx\";\n\nimport \"react-awesome-button/dist/styles.css\";\nimport \"./App.css\";\n\nimport image1 from \"./assets/01.jpeg\";\nimport image2 from \"./assets/02.jpeg\";\nimport image3 from \"./assets/03.jpeg\";\nimport image4 from \"./assets/04.jpeg\";\nimport image5 from \"./assets/05.jpeg\";\n\n\nconst App = () => (\n  <div className=\"main\">\n    <div className=\"container\">\n      <Parallax strength={500}>\n        <ParticlesBg type=\"ball\" bg={true}/>\n        <div style={{ height: 500 }}>\n          <div className=\"boxs header\">\n            <h1 className=\"title\">Artem Bay</h1>\n            <h4 className=\"introduction\">\n              Just minecraft player and some programmer\n            </h4>\n            <div className=\"buttons\">\n              <a href=\"https://discord.gg/K3Z2vgwK5a\">\n                <AwesomeButton\n                  size=\"medium\"\n                  type=\"secondary\"\n                >\n                  my shop\n                </AwesomeButton> \n              </a> \n              <div className=\"space\"></div>\n              <a href=\"https://discord.com/users/356737308898099201/\">\n                <AwesomeButton\n                  size=\"medium\"\n                  type=\"primary\"\n                >\n                  my discord profile\n                </AwesomeButton>\n              </a> \n            </div>\n          </div>\n        </div>\n      </Parallax>\n\n      <Parallax bgImage={image1} blur={{ min: -1, max: 3 }}>\n        <div style={{ height: 600 }}>\n          <div className=\"boxs\">\n            <h1 className=\"underline\">About me</h1>\n            <div className=\"box-con\">\n              I'm 14yo Python, Action Script 4 and Arduino programmist. Coding discord bots. Right now working on my shop and minecraft server. Looking for work\n            </div>\n          </div>\n        </div>\n      </Parallax>\n\n      <Parallax strength={-100}>\n        <div style={{ height: 500 }}>\n          <div className=\"boxs\">\n            <h1 className=\"blue underline\">Personality</h1>\n            <Icons />\n            <div className=\"box-con blue\">\n              How to reach me? Dm me in discord (link above), telegram @ArtemBay2 or email kkunfin@gmail.com\n            </div>\n          </div>\n        </div>\n      </Parallax>\n\n      <Parallax\n        bgImage={image4}\n        strength={200}\n        renderLayer={percentage => (\n          <div>\n            <div\n              style={{\n                position: \"absolute\",\n                background: `rgba(255, 125, 0, ${percentage * 1})`,\n                left: \"50%\",\n                top: \"50%\",\n                borderRadius: \"50%\",\n                transform: \"translate(-50%,-50%)\",\n                width: percentage * 500,\n                height: percentage * 500\n              }}\n            />\n          </div>\n        )}\n      >\n        <div style={{ height: 500 }}>\n          <div className=\"boxs\">\n            <div className=\"bsize\">ImMoonLord was here</div>\n          </div>\n        </div>\n      </Parallax>\n\n      <Parallax strength={-100}>\n        <div style={{ height: 600 }}>\n          <div className=\"boxs\">\n            <div className=\"box-con blue\">\n              <h1 className=\"underline\">Sample Code</h1>\n              <div className=\"left code\"><Code /></div>\n              <div>This is the code of some examples. You can copy and paste it into your program to run</div>\n            </div>\n          </div>\n        </div>\n      </Parallax>\n    </div>\n    <div className=\"footer\">Copyright Mr right. This code is open source. Original code: https://artembay.tk/poland</div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}